// Specification of the user facing gRPC API.
syntax = "proto3";
package rpc;

import "requests.proto";
import "responses.proto";

service Api {
    // Gets a list of proofs for given nullifier hashes, each proof as a sparse Merkle Tree.
    rpc CheckNullifiers(requests.CheckNullifiersRequest) returns (responses.CheckNullifiersResponse) {}

    // Returns a list of nullifiers that match the specified prefixes and are recorded in the node.
    rpc CheckNullifiersByPrefix(requests.CheckNullifiersByPrefixRequest) returns (responses.CheckNullifiersByPrefixResponse) {}

    // Returns the latest state of an account with the specified ID.
    rpc GetAccountDetails(requests.GetAccountDetailsRequest) returns (responses.GetAccountDetailsResponse) {}

    // Returns the latest state proofs of accounts with the specified IDs.
    rpc GetAccountProofs(requests.GetAccountProofsRequest) returns (responses.GetAccountProofsResponse) {}

    // Returns delta of the account states in the range from `from_block_num` (exclusive) to
    // `to_block_num` (inclusive).
    rpc GetAccountStateDelta(requests.GetAccountStateDeltaRequest) returns (responses.GetAccountStateDeltaResponse) {}

    // Retrieves block data by given block number.
    rpc GetBlockByNumber(requests.GetBlockByNumberRequest) returns (responses.GetBlockByNumberResponse) {}

    // Retrieves block header by given block number. Optionally, it also returns the MMR path
    // and current chain length to authenticate the block's inclusion.
    rpc GetBlockHeaderByNumber(requests.GetBlockHeaderByNumberRequest) returns (responses.GetBlockHeaderByNumberResponse) {}

    // Returns a list of notes matching the provided note IDs.
    rpc GetNotesById(requests.GetNotesByIdRequest) returns (responses.GetNotesByIdResponse) {}

    // Submits proven transaction to the Miden network.
    rpc SubmitProvenTransaction(requests.SubmitProvenTransactionRequest) returns (responses.SubmitProvenTransactionResponse) {}

    // Note synchronization request.
    //
    // Specifies note tags that client is interested in. The server will return the first block which
    // contains a note matching `note_tags` or the chain tip.
    rpc SyncNotes(requests.SyncNoteRequest) returns (responses.SyncNoteResponse) {}

    // Returns info which can be used by the client to sync up to the latest state of the chain
    // for the objects (accounts, notes, nullifiers) the client is interested in.
    //
    // This request returns the next block containing requested data. It also returns `chain_tip`
    // which is the latest block number in the chain. Client is expected to repeat these requests
    // in a loop until `response.block_header.block_num == response.chain_tip`, at which point
    // the client is fully synchronized with the chain.
    //
    // Each request also returns info about new notes, nullifiers etc. created. It also returns
    // Chain MMR delta that can be used to update the state of Chain MMR. This includes both chain
    // MMR peaks and chain MMR nodes.
    //
    // For preserving some degree of privacy, note tags and nullifiers filters contain only high
    // part of hashes. Thus, returned data contains excessive notes and nullifiers, client can make
    // additional filtering of that data on its side.
    rpc SyncState(requests.SyncStateRequest) returns (responses.SyncStateResponse) {}
}
