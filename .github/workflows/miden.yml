# Test ssh connectivity through ssm
name: Node deployment
on:
  workflow_dispatch:
  push:
    branches:
      - next

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Configure the `NETWORK` env variable based on the trigger type.
      #
      # This is then used by subsequent steps to switch on devnet | testnet,
      # instead of switching on trigger type which is less readible.
      - name: Select testnet
        if: github.event_name == 'workflow_dispatch'
        run: 
          echo "NETWORK=testnet" >> $GITHUB_ENV
          echo "SSH_KEY=miden-test.pem" >> $GITHUB_ENV
      
      - name: Select devnet
        if: github.event_name != 'workflow_dispatch'
        run: 
          echo "NETWORK=devnet" >> $GITHUB_ENV
          echo "SSH_KEY=polygon-miden-ec2.pem" >> $GITHUB_ENV
        
      # Configure AWS credentials based on network.
      - name: Configure testnet AWS credentials
        if: env.NETWORK == 'testnet'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::211125515935:role/Miden-GithubActionsRole
          aws-region: us-west-1

      - name: Configure devnet AWS credentials
        if: env.NETWORK == 'devnet'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::657556092833:role/Miden-GithubActionsRole
          aws-region: us-west-1

      # Configure instance IP based on network.
      - name: Configure testnet IP
        if: env.NETWORK == 'testnet'
        run: echo "AWS_IP=54.154.193.162" >> $GITHUB_ENV

      - name: Configure devnet IP
        if: env.NETWORK == 'devnet'
        run: echo "AWS_IP=3.255.177.27" >> $GITHUB_ENV

      - name: Stop services
        run: |
          ssh -i ${{ env.SSH_KEY }} -o "StrictHostKeyChecking no" ec2-user@{{ env.AWS_IP }} << 'EOF'
            sudo systemctl stop miden-node
            sudo systemctl stop miden-faucet
          EOF

      - name: Install prerequisites
        run: |
          ssh -i ${{ env.SSH_KEY }} -o "StrictHostKeyChecking no" ec2-user@{{ env.AWS_IP }} << 'EOF'
            sudo yum update -y
            sudo yum install -y git gcc openssl-devel bzip2-devel libffi-devel make
            sudo yum groupinstall -y "Development Tools"

            # Install Rust
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source $HOME/.cargo/env
            rustup update

            # Install dependencies
            sudo yum install -y clang cmake
          EOF

      - name: Install testnet 
        if: env.NETWORK == 'testnet'
        run: |
          ssh -i ${{ env.SSH_KEY }} -o "StrictHostKeyChecking no" ec2-user@{{ env.AWS_IP }} << 'EOF'
            cargo install miden-node miden-faucet --locked --features testing
          EOF

      - name: Install devnet
        if: env.NETWORK == 'devnet'
        run: |
          ssh -i ${{ env.SSH_KEY }} -o "StrictHostKeyChecking no" ec2-user@{{ env.AWS_IP }} << 'EOF'
            cargo install --git https://github.com/0xPolygonMiden/miden-node miden-node   --branch next --bin miden-node   --locked --features testing 
            cargo install --git https://github.com/0xPolygonMiden/miden-node miden-faucet --branch next --bin miden-faucet --locked --features testing
          EOF

      - name: Configure
        run: |
          ssh -i ${{ env.SSH_KEY }} -o "StrictHostKeyChecking no" ec2-user@{{ env.AWS_IP }} << 'EOF'
            # Remove any existing data, folders must exist for following steps.
            rm -rf ~/miden-node;   mkdir ~/miden-node
            rm -rf ~/miden-faucet; mkdir ~/miden-faucet

            # Create configuration files and generate genesis block information.
            miden-node init -c ~/miden-node/miden-node.toml -g ~/miden-node/genesis.toml
            miden-node make-genesis -i ~/miden-node/genesis.toml -o ~/miden-node/genesis.dat
            miden-faucet init -c ~/miden-faucet/miden-faucet.toml

            # Node systemd service file.
            cat > /etc/systemd/system/miden-node.service << END_OF_CAT
              [Unit]
              Description=Miden node
              After=network.target

              [Service]
              ExecStart=miden-node start -c miden-node.toml node
              Restart=on-failure
              User=ec2-user
              WorkingDirectory=~/miden-node
              Environment="RUST_LOG=info"
              LimitNOFILE=10000

              [Install]
              WantedBy=multi-user.target
            END_OF_CAT

            # Faucet systemd service file.
            cat > /etc/systemd/system/miden-facuet.service << END_OF_CAT
              [Unit]
              Description=Miden faucet
              After=network.target

              [Service]
              ExecStart=miden-faucet start -c miden-faucet.toml
              Restart=on-failure
              User=ec2-user
              WorkingDirectory=~/miden-faucet
              Environment="RUST_LOG=info"
              LimitNOFILE=10000

              [Install]
              WantedBy=multi-user.target
            END_OF_CAT
          EOF

      - name: Start services
        run: |
          ssh -i ${{ env.SSH_KEY }} -o "StrictHostKeyChecking no" ec2-user@{{ env.AWS_IP }} << 'EOF'
            sudo systemctl daemon-reload
            sudo systemctl enable miden-node
            sudo systemctl enable miden-faucet

            # The faucet must wait for the node to start. Sleeping is not an elegant way of achieving this,
            # but it will suffice for now.
            sudo systemctl start miden-node
            sleep 5
            sudo systemctl start miden-faucet
          EOF
